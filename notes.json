{
    "topics": [
        {
            "id": "topic1",
            "title": "Introduction to Programming",
            "description": "Programming is the process of writing instructions for a computer to execute.",
            "content": [
                {
                    "description": "Programming helps automate tasks and solve complex problems efficiently.",
                    "code": "// Example code\nconsole.log(\"Hello, World!\");"
                },
                {
                    "description": "You can write code in different programming languages like Java, Python, JavaScript, etc.",
                    "code": "print(\"Hello, World!\")  # Python example"
                }
            ],
            "subtopics": [
                {
                    "id": "subtopic1-1",
                    "title": "History of Programming",
                    "description": "Programming has evolved from low-level machine languages to high-level languages.",
                    "content": [
                        {
                            "description": "Early programming involved punch cards and machine code.",
                            "code": "// Assembly example\nMOV A, 5\nADD B, A"
                        }
                    ]
                },
                {
                    "id": "subtopic1-2",
                    "title": "Popular Programming Languages",
                    "description": "Different languages are used for different purposes.",
                    "content": [
                        {
                            "description": "JavaScript is used for web development.",
                            "code": "document.write('Hello from JavaScript!');"
                        },
                        {
                            "description": "Python is known for data science, automation, and scripting.",
                            "code": "def greet():\n    print(\"Hello, Python World!\")\ngreet()"
                        }
                    ]
                }
            ]
        },
        {
            "id": "topic2",
            "title": "Variables and Data Types",
            "description": "Variables are containers for storing data values.",
            "content": [
                {
                    "description": "You can declare variables using `let`, `const`, or `var` in JavaScript.",
                    "code": "let name = \"John\";\nconst age = 30;\nconsole.log(name, age);"
                },
                {
                    "description": "Java supports strongly-typed variables.",
                    "code": "int number = 10;\nString text = \"Hello\";\nSystem.out.println(text);"
                }
            ],
            "subtopics": [
                {
                    "id": "subtopic2-1",
                    "title": "Primitive Data Types",
                    "description": "Primitive types include numbers, booleans, and characters.",
                    "content": [
                        {
                            "description": "JavaScript primitive types are Number, String, Boolean, Null, Undefined, and Symbol.",
                            "code": "let isActive = true;\nlet score = 100;\nconsole.log(isActive, score);"
                        }
                    ]
                },
                {
                    "id": "subtopic2-2",
                    "title": "Reference Data Types",
                    "description": "Objects, arrays, and functions are reference data types.",
                    "content": [
                        {
                            "description": "In JavaScript, arrays and objects are mutable reference types.",
                            "code": "let user = {name: \"Alice\", age: 25};\nlet items = [1, 2, 3];\nconsole.log(user, items);"
                        }
                    ]
                }
            ]
        },
        {
            "id": "topic3",
            "title": "Control Statement",
            "description": "",
            "content": [
                {
                    "description": "This Java code demonstrates the use of comparison operators to compare two integers 'a' and 'b'. It evaluates conditions such as 'less than', 'less than or equal to', 'greater than', 'greater than or equal to', 'equal to', and 'not equal to', printing the result for each condition.",
                    "code": "public class ComparisonExample {\n    public static void main(String[] args) {\n        int a = 10;\n        int b = 20;\n\n        // Using comparison operators in if-else\n        if (a < b) {\n            System.out.println(\"a is less than b\"); // Output: a is less than b\n        }\n\n        if (a <= b) {\n            System.out.println(\"a is less than or equal to b\"); // Output: a is less than or equal to b\n        }\n\n        if (a > b) {\n            System.out.println(\"a is greater than b\"); // Output: a is not equal to b\n        }\n\n        if (a >= b) {\n            System.out.println(\"a is greater than or equal to b\");\n        }\n\n        if (a == b) {\n            System.out.println(\"a is equal to b\");\n        }\n\n        if (a != b) {\n            System.out.println(\"a is not equal to b\");\n        }\n    }\n}"
                },
                
                {
                    "description": "",
                    "code": ""
                }
            ],
            "subtopics": [
                {
                    "id": "subtopic3-1",
                    "title": "If-else-else if",
                    "description": "",
                    "content": [
                        {
                            "description": "Basic if-else Statement",
                            "code": "public class basicIfElse {\n\n    public static void main(String[] args) {\n        int number = 10;\n\n        if(number > 0) {\n            System.out.println(\"The number is positive\"); // This is result\n        } else {\n            System.out.println(\"The number is not positive\");\n        }\n    }\n}"
                        },
                        {
                            "description": "Basic if-else Statement",
                            "code": "public class basicIfElse {\n\n    public static void main(String[] args) {\n        int number = 10;\n\n        if(number > 0) {\n            System.out.println(\"The number is positive\"); // This is result\n        } else {\n            System.out.println(\"The number is not positive\");\n        }\n    }\n}"
                        }
                    ]
                },
                {
                    "id": "subtopic3-2",
                    "title": "Higher-Order Functions",
                    "description": "Functions that take other functions as arguments or return functions.",
                    "content": [
                        {
                            "description": "Array methods like `map`, `filter`, and `reduce` use higher-order functions.",
                            "code": "const numbers = [1, 2, 3, 4];\nconst squared = numbers.map(n => n * n);\nconsole.log(squared);"
                        }
                    ]
                }
            ]
        },
        {
            "id": "topic4",
            "title": "Loops",
            "description": "Loops are used to execute a block of code repeatedly.",
            "content": [
                {
                    "description": "For loops are commonly used for iterating over arrays.",
                    "code": "for (let i = 0; i < 5; i++) {\n    console.log(i);\n}"
                },
                {
                    "description": "While loops continue as long as the condition is true.",
                    "code": "let count = 0;\nwhile (count < 3) {\n    console.log(count);\n    count++;\n}"
                }
            ],
            "subtopics": [
                {
                    "id": "subtopic4-1",
                    "title": "Nested Loops",
                    "description": "Loops within loops, useful for multidimensional arrays.",
                    "content": [
                        {
                            "description": "Example of a nested loop to create a multiplication table.",
                            "code": "for (let i = 1; i <= 3; i++) {\n    for (let j = 1; j <= 3; j++) {\n        console.log(`${i} x ${j} = ${i * j}`);\n    }\n}"
                        }
                    ]
                },
                {
                    "id": "subtopic4-2",
                    "title": "Break and Continue",
                    "description": "Control loop flow with `break` and `continue`.",
                    "content": [
                        {
                            "description": "`break` exits the loop early, while `continue` skips the current iteration.",
                            "code": "for (let i = 0; i < 5; i++) {\n    if (i === 3) break;\n    console.log(i);\n}"
                        }
                    ]
                }
            ]
        },
        {
            "id": "topic5",
            "title": "Arrays",
            "description": "Arrays are used to store multiple values in a single variable.",
            "content": [
                {
                    "description": "JavaScript arrays are flexible and can hold mixed data types.",
                    "code": "let fruits = [\"Apple\", \"Banana\", \"Cherry\"];\nconsole.log(fruits[0]);"
                },
                {
                    "description": "Java arrays are strongly typed and have a fixed size.",
                    "code": "String[] fruits = {\"Apple\", \"Banana\", \"Cherry\"};\nSystem.out.println(fruits[0]);"
                }
            ],
            "subtopics": [
                {
                    "id": "subtopic5-1",
                    "title": "Array Methods",
                    "description": "Common methods include `push`, `pop`, `shift`, and `unshift`.",
                    "content": [
                        {
                            "description": "Use `push` to add elements and `pop` to remove the last element.",
                            "code": "let numbers = [1, 2, 3];\nnumbers.push(4);\nconsole.log(numbers);\nnumbers.pop();\nconsole.log(numbers);"
                        }
                    ]
                },
                {
                    "id": "subtopic5-2",
                    "title": "Multidimensional Arrays",
                    "description": "Arrays within arrays, useful for matrices.",
                    "content": [
                        {
                            "description": "Access elements using multiple indices.",
                            "code": "let matrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\nconsole.log(matrix[1][2]);"
                        }
                    ]
                }
            ]
        }
    ]
}
