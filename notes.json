{
    "topics": [
        {
            "id": "topic1",
            "title": "Introduction to Programming",
            "description": "Programming is the process of writing instructions for a computer to execute.",
            "content": [
                {
                    "description": "Programming helps automate tasks and solve complex problems efficiently.",
                    "code": "// Example code\nconsole.log(\"Hello, World!\");"
                },
                {
                    "description": "You can write code in different programming languages like Java, Python, JavaScript, etc.",
                    "code": "print(\"Hello, World!\")  # Python example"
                }
            ],
            "subtopics": [
                {
                    "id": "subtopic1-1",
                    "title": "History of Programming",
                    "description": "Programming has evolved from low-level machine languages to high-level languages.",
                    "content": [
                        {
                            "description": "Early programming involved punch cards and machine code.",
                            "code": "// Assembly example\nMOV A, 5\nADD B, A"
                        }
                    ]
                },
                {
                    "id": "subtopic1-2",
                    "title": "Popular Programming Languages",
                    "description": "Different languages are used for different purposes.",
                    "content": [
                        {
                            "description": "JavaScript is used for web development.",
                            "code": "document.write('Hello from JavaScript!');"
                        },
                        {
                            "description": "Python is known for data science, automation, and scripting.",
                            "code": "def greet():\n    print(\"Hello, Python World!\")\ngreet()"
                        }
                    ]
                }
            ]
        },
        {
            "id": "topic2",
            "title": "Variables and Data Types",
            "description": "Variables are containers for storing data values.",
            "content": [
                {
                    "description": "You can declare variables using `let`, `const`, or `var` in JavaScript.",
                    "code": "let name = \"John\";\nconst age = 30;\nconsole.log(name, age);"
                },
                {
                    "description": "Java supports strongly-typed variables.",
                    "code": "int number = 10;\nString text = \"Hello\";\nSystem.out.println(text);"
                }
            ],
            "subtopics": [
                {
                    "id": "subtopic2-1",
                    "title": "Primitive Data Types",
                    "description": "Primitive types include numbers, booleans, and characters.",
                    "content": [
                        {
                            "description": "JavaScript primitive types are Number, String, Boolean, Null, Undefined, and Symbol.",
                            "code": "let isActive = true;\nlet score = 100;\nconsole.log(isActive, score);"
                        }
                    ]
                },
                {
                    "id": "subtopic2-2",
                    "title": "Reference Data Types",
                    "description": "Objects, arrays, and functions are reference data types.",
                    "content": [
                        {
                            "description": "In JavaScript, arrays and objects are mutable reference types.",
                            "code": "let user = {name: \"Alice\", age: 25};\nlet items = [1, 2, 3];\nconsole.log(user, items);"
                        }
                    ]
                }
            ]
        },
        {
            "id": "topic3",
            "title": "Control Statement",
            "description": "",
            "content": [
                {
                    "description": "This Java code demonstrates the use of comparison operators to compare two integers 'a' and 'b'. It evaluates conditions such as 'less than', 'less than or equal to', 'greater than', 'greater than or equal to', 'equal to', and 'not equal to', printing the result for each condition.",
                    "code": "public class ComparisonExample {\n    public static void main(String[] args) {\n        int a = 10;\n        int b = 20;\n\n        // Using comparison operators in if-else\n        if (a < b) {\n            System.out.println(\"a is less than b\"); // Output: a is less than b\n        }\n\n        if (a <= b) {\n            System.out.println(\"a is less than or equal to b\"); // Output: a is less than or equal to b\n        }\n\n        if (a > b) {\n            System.out.println(\"a is greater than b\"); // Output: a is not equal to b\n        }\n\n        if (a >= b) {\n            System.out.println(\"a is greater than or equal to b\");\n        }\n\n        if (a == b) {\n            System.out.println(\"a is equal to b\");\n        }\n\n        if (a != b) {\n            System.out.println(\"a is not equal to b\");\n        }\n    }\n}"
                },
                
                {
                    "description": "",
                    "code": ""
                }
            ],
            "subtopics": [
                {
                    "id": "subtopic3-1",
                    "title": "If-else-else if",
                    "description": "",
                    "content": [
                        {
                            "description": "Basic if-else Statement",
                            "code": "public class basicIfElse {\n\n    public static void main(String[] args) {\n        int number = 10;\n\n        if(number > 0) {\n            System.out.println(\"The number is positive\"); // This is result\n        } else {\n            System.out.println(\"The number is not positive\");\n        }\n    }\n}"
                        },
                        {
                            "description": "if-else with Multiple Conditions (if-else if-else)",
                            "code": "public class multiPleCondition {\n\n    public static void main(String[] args) {\n        int Age = 18;\n\n        if(Age < 18) {\n            System.out.println(\"You are a minor\");\n        } else if(Age == 18) {\n            System.out.println(\"You just become an adult\"); // This is the result\n        } else {\n            System.out.println(\"You are an adult\");\n        }\n    }\n}"
                        }
                    ]
                },
                {
                    "id": "subtopic3-2",
                    "title": "Get Input with if-else",
                    "description": "",
                    "content": [
                        {
                            "description": "In Java, we can get user input using the Scanner class and control the flow using if-else or other control statements like switch, while, and for",
                            "code": "import java.util.Scanner;\n\npublic class IfElseInput {\n\n    public static void main(String[] args) {\n        Scanner inputOutput = new Scanner(System.in); // We need to create scanner object\n\n        System.out.println(\"Enter your Age\");\n        int age = inputOutput.nextInt();\n\n        if (age < 18) {\n            System.out.println(\"You are a minor\");\n        } else {\n            System.out.println(\"You are an adult\");\n        }\n\n        inputOutput.close(); // Close the Scanner\n    }\n}"
                        }
                        
                    ]
                },
                {
                    "id": "subtopic3-3",
                    "title": "Nested Loops with if-else only",
                    "description": "A nested loop is a loop inside another loop. We use nested loops when we need to repeat a process multiple times within another repeated process.",
                    "content": [
                        {
                            "description": "Main Reason for Using Nested Loops",
                            "code": "Question: 01 - Write a Java program that checks whether a number is positive. If the number is positive, determine whether it is even or odd \n\n public class NestedIfElse {\n\n    public static void main(String[] args) {\n        int number = -6;\n\n        if(number > 0) {\n            if(number % 2 == 0) { // nested if: check if number is even\n                System.out.println(\"The Number is Positive and Even\");\n            } else {\n                System.out.println(\"The Number is Positive but Odd\");\n            }\n        } else {\n            System.out.println(\"The Number is Not Positive\"); // This is the output now\n        }\n    }\n}",
                            "table": {
                            "headers": ["Main Reason", "Explanation", "Example"],
                            "rows": [
                    ["Working with Multi-Dimensional Data", "Used for handling 2D arrays, tables, matrices, and grids.","Traversing a 2D array (rows & columns)."],
                    ["Generating Patterns & Shapes", "Helps print triangle, square, or other patterns using loops.","Printing a pyramid of stars (*)"],
                    ["Solving Complex Problems Efficiently", "Useful for comparing every element in a list with others.","Checking duplicate values in an array."],
                    ["Simulating Multiple Conditions", "Used for simulations like time-based processes, games, etc.", "Simulating a clock counting hours & minutes."]
                    
                ]
            }
                        }
                    ]
                },
                {
                    "id": "subtopic3-4",
                    "title": "Java Switch",
                    "description": "Instead of writing many if..else statements, we can use the switch statement",
                    "content": [
                        {
                            "description": "Using switch is often more structured and easier to read compared to long if-else chains",
                            "code": "public class Intro {\n\n    public static void main(String[] args) {\n        int day = 4; // Define an integer variable 'day' and set it to 4\n\n        // Switch statement to check the value of 'day'\n        switch (day) {\n            case 1:\n                System.out.println(\"Monday\"); // Print \"Monday\" if day is 1\n                break;\n            case 2:\n                System.out.println(\"Tuesday\"); // Print \"Tuesday\" if day is 2\n                break;\n            case 3:\n                System.out.println(\"Wednesday\"); // Print \"Wednesday\" if day is 3\n                break;\n            case 4:\n                System.out.println(\"Thursday\"); // Print \"Thursday\" if day is 4\n                break;\n            case 5:\n                System.out.println(\"Friday\"); // Print \"Friday\" if day is 5\n                break;\n            case 6:\n                System.out.println(\"Saturday\"); // Print \"Saturday\" if day is 6\n                break;\n            case 7:\n                System.out.println(\"Sunday\"); // Print \"Sunday\" if day is 7\n                break;\n        }\n    }\n}",
				"table": {
                		"headers": ["Scenario", "Use switch","Use if-else"],
                		"rows": [
                    		["Comparing a single variable against multiple fixed values", "✅Yes", "❌No"],
                    		["Checking a range (e.g., x > 10, age < 18)", "❌No", "✅Yes"],
				["Using logical expressions (e.g., a > 5 && b < 10)", "❌No", "✅Yes"],
                    		["Simple conditions with few options", "✅Yes", "✅Yes"],
				["More than 3-4 conditions with fixed values", "✅ Yes (cleaner)", "❌ No (messy)"]
                    
                ]
            }
                        },
                        {
                            "description": "The default keyword specifies some code to run if there is no case match:",
                            "code": "public class Main {\n  public static void main(String[] args) {\n    int day = 8; // Define 'day' with a value that is not in the cases\n\n    // Switch statement to check the value of 'day'\n    switch (day) {\n      case 1:\n        System.out.println(\"Monday\");\n        break;\n      case 2:\n        System.out.println(\"Tuesday\");\n        break;\n      case 3:\n        System.out.println(\"Wednesday\");\n        break;\n      case 4:\n        System.out.println(\"Thursday\");\n        break;\n      case 5:\n        System.out.println(\"Friday\");\n        break;\n      case 6:\n        System.out.println(\"Saturday\");\n        break;\n      case 7:\n        System.out.println(\"Sunday\");\n        break;\n      default:\n        System.out.println(\"Invalid day\"); // This runs if no case matches\n    }\n  }\n}"
                        }
                        
                    ]
                },
                {
                    "id": "subtopic3-2",
                    "title": "Get Input with switch",
                    "description": "",
                    "content": [
                        {
                            "description": "In Java, we can get user input using the Scanner class and control the flow using if-else or other control statements like switch, while, and for",
                            "code": "import java.util.Scanner;  // Import Scanner class for user input\n\npublic class inputSwitch {\n\n    public static void main(String[] args) {\n        \n        Scanner inputSwitchData = new Scanner(System.in); // Create Scanner object\n\n        System.out.println(\"Enter a number (1-3): \"); // Prompt user for input\n\n        int inputData = inputSwitchData.nextInt(); // Read user input\n\n        // Switch case to check user input\n        switch (inputData) {\n            case 1:\n                System.out.println(\"You Select System 1\");\n                break;\n            \n            case 2:\n                System.out.println(\"You Select System 2\");\n                break;\n\n            case 3:\n                System.out.println(\"You Select System 3\");\n                break;\n\n            default:\n                System.out.println(\"Invalid Choice\"); // Handle invalid input\n        }\n\n        inputSwitchData.close(); // Close Scanner object\n    }\n}"
                        }
                        
                    ]
                }
            ]
        },
        {
            "id": "topic4",
            "title": "Loops",
            "description": "Loops are used to execute a block of code repeatedly.",
            "content": [
                {
                    "description": "A for loop is a way to repeat a block of code a specific number of times. It is used when you know how many times you need to run the loop.",
                    "code": "for (initialization; condition; update) \n { // Code to execute \n}"
                },
                {
                    "description": "Imagine you have five apples, and you want to count them one by one. Instead of saying:\n👉 Apple 1\n👉 Apple 2\n👉 Apple 3\n👉 Apple 4\n👉 Apple 5",
                    "code": "public class Main { \n public static void main(String[] args) { \n // Loop runs 5 times \n for (int i = 1; i <= 5; i++) { \n System.out.println(\"Apple \" + i); }}}"
                },
                {
                    "description": "Output",
                    "code": "Apple 1 \nApple 2 \nApple 3\nApple 4 \nApple 5"
                },
                {
                    "description": "Lets See How Loop Works for this above code",
                    "code": "",
                    "table": {
                "headers": ["Iteration", "Value of i", "Condition i <= 5", "Prints i", "i++ (Increments)"],
                "rows": [
                ["1st", "1", "✅ True", "1", "i = 2"],
                ["2nd", "2", "✅ True", "2", "i = 3"],
                ["3rd", "3", "✅ True", "3", "i = 4"],
                ["4th", "4", "✅ True", "4", "i = 5"],
                ["5th", "5", "✅ True", "5", "i = 6"],
                ["6th", "6", "❌ False (Loop stops)", "❌ Nothing", "Loop ends"]
                    ]
                    }
                },
                {
                    "description": "Reverse for Loop: To Print Numbers in reverse",
                    "code": "public class ReverseForLoop { \n\n public static void main(String[] args) { \n for (int i = 5; i >= 1; i--) { \n System.err.println(i);} }  }"
                },
                {
                    "description": "Output",
                    "code": "5\n4\n3\n2\n1"
                },
                {
                    "description": "How the Reverse For Loop Works:",
                    "code": "",
                    "table":{
                    "headers": ["Iteration", "Value of i", "Condition i >= 1", "Prints i", "i-- (Decrements)"],
                    "rows": [
                    ["1st", "5", "✅ True", "5", "i = 4"],
                    ["2nd", "4", "✅ True", "4", "i = 3"],
                    ["3rd", "3", "✅ True", "3", "i = 2"],
                    ["4th", "2", "✅ True", "2", "i = 1"],
                    ["5th", "1", "✅ True", "1", "i = 0"],
                    ["6th", "0", "❌ False (Loop stops)", "❌ Nothing", "Loop ends"]
                    ]}

                }

            ],
            "subtopics": [
                {
                    "id": "subtopic4-1",
                    "title": "Basic Reverse Loops",
                    "description": "",
                    "content": [
                {
                    "description": "A for loop is a way to repeat a block of code a specific number of times. It is used when you know how many times you need to run the loop.",
                    "code": "for (initialization; condition; update) \n { // Code to execute \n}"
                },
                {
                    "description": "Imagine you have five apples, and you want to count them one by one. Instead of saying:\n👉 Apple 1\n👉 Apple 2\n👉 Apple 3\n👉 Apple 4\n👉 Apple 5",
                    "code": "public class Main { \n public static void main(String[] args) { \n // Loop runs 5 times \n for (int i = 1; i <= 5; i++) { \n System.out.println(\"Apple \" + i); }}}"
                },
                {
                    "description": "Output",
                    "code": "Apple 1 \nApple 2 \nApple 3\nApple 4 \nApple 5"
                },
                {
                    "description": "Lets See How Loop Works for this above code",
                    "code": "",
                    "table": {
                "headers": ["Iteration", "Value of i", "Condition i <= 5", "Prints i", "i++ (Increments)"],
                "rows": [
                ["1st", "1", "✅ True", "1", "i = 2"],
                ["2nd", "2", "✅ True", "2", "i = 3"],
                ["3rd", "3", "✅ True", "3", "i = 4"],
                ["4th", "4", "✅ True", "4", "i = 5"],
                ["5th", "5", "✅ True", "5", "i = 6"],
                ["6th", "6", "❌ False (Loop stops)", "❌ Nothing", "Loop ends"]
                    ]
                    }
                },
                {
                    "description": "Reverse for Loop: To Print Numbers in reverse",
                    "code": "public class ReverseForLoop { \n\n public static void main(String[] args) { \n for (int i = 5; i >= 1; i--) { \n System.err.println(i);} }  }"
                },
                {
                    "description": "Output",
                    "code": "5\n4\n3\n2\n1"
                },
                {
                    "description": "How the Reverse For Loop Works:",
                    "code": "",
                    "table":{
                    "headers": ["Iteration", "Value of i", "Condition i >= 1", "Prints i", "i-- (Decrements)"],
                    "rows": [
                    ["1st", "5", "✅ True", "5", "i = 4"],
                    ["2nd", "4", "✅ True", "4", "i = 3"],
                    ["3rd", "3", "✅ True", "3", "i = 2"],
                    ["4th", "2", "✅ True", "2", "i = 1"],
                    ["5th", "1", "✅ True", "1", "i = 0"],
                    ["6th", "0", "❌ False (Loop stops)", "❌ Nothing", "Loop ends"]
                    ]}

                }

            ]
                },
                {
                    "id": "subtopic4-2",
                    "title": "Nested Loops",
                    "description": "Loops within loops, useful for multidimensional arrays.",
                    "content": [
                        {
                            "description": "Example of a nested loop to create a multiplication table.",
                            "code": "for (let i = 1; i <= 3; i++) {\n    for (let j = 1; j <= 3; j++) {\n        console.log(`${i} x ${j} = ${i * j}`);\n    }\n}"
                        }
                    ]
                },
                {
                    "id": "subtopic4-3",
                    "title": "Break and Continue",
                    "description": "Control loop flow with `break` and `continue`.",
                    "content": [
                        {
                            "description": "Using `break` to exit a loop early in Java.",
                            "code": "public class BreakExample {\n    public static void main(String[] args) {\n        for (int i = 1; i <= 10; i++) {\n            if (i == 5) {\n                break; // Exit loop when i == 5\n            }\n            System.out.println(i);\n        }\n    }\n}"
                        },
                        {
                            "description": "How This Code Works Step by Step.",
                            "code": ""
                        },
                        {
                            "description": "1. Loop Initialization: int i = 1 (starts from 1).",
                            "code": ""
                        },
                        {
                            "description": "2. Condition Check: i <= 10 (loop runs as long as i is less than or equal to 10).",
                            "code": ""
                        },
                        {
                            "description": "Inside the Loop:",
                            "code": ""
                        },
                        {
                            "description": "2.1 If i is 5, break; stops the loop immediately.",
                            "code": ""
                        },
                        {
                            "description": "2.2 Otherwise, it prints i.",
                            "code": ""
                        },
                        {
                            "description": "4. Loop Stops at i = 5, so numbers after 5 are never printed.",
                            "code": "",
                            
                                "table": {
                                  "headers": ["Iteration", "i Value", "Condition (i ≤ 10)", "Check (i == 5)", "Action", "Output"],
                                  "rows": [
                                    ["1st", "1", "✅ True", "❌ No", "Print 1", "1"],
                                    ["2nd", "2", "✅ True", "❌ No", "Print 2", "2"],
                                    ["3rd", "3", "✅ True", "❌ No", "Print 3", "3"],
                                    ["4th", "4", "✅ True", "❌ No", "Print 4", "4"],
                                    ["5th", "5", "✅ True", "✅ Yes", "Break (Exit Loop)", "(Loop Stops)"]
                                  ]
                                }
                              }
                        
                    ]
                }
            ]
        },
        {
            "id": "topic5",
            "title": "Arrays",
            "description": "Suppose you have a guest at your house, and you are serving them tea. Instead of bringing separate cups of tea one by one, you place all the cups on a tray and serve them together. In this analogy, the tray represents an array.",
            "content": [
                {
                    "description": "Thease are my cup of tea",
                    "code": "int i=5; \nint j=6; \nint k=7; \n\nthease are my cup of tea"
                },
                {
                    "description": "Here is your tray for the tea",
                    "code": "int num[]= {5,6,7}; \nint num[]=new int[4];"
                },
                {
                    "description": "Full Example of Array",
                    "code": "public class ArrayExample {\n    public static void main(String[] args) {\n        String[] cars = {\"Tesla\", \"Toyota\", \"Hyundai\"};\n        int[] numbers = {10, 20, 30, 40, 50};\n        \n} "
                }
            ],
            "subtopics": [
                {
                    "id": "subtopic5-1",
                    "title": "Access & Modify Array ",
                    "description": "Here, I showed how to access an array by creating an object and also how to access it from the main method.",
                    "content": [
                        {
                            "description": "look at this example here",
                            "code": "public class AccessArray {\n\n    String[] mobileOperator = {\"Nokia\", \"Samsung\", \"iOS\"};\n    int[] number = {1, 2, 3, 0, 4, 5};\n\n    public static void main(String[] args) {\n        String[] networkOperator = {\"LMT\", \"Visio\", \"iOS\"};\n\n        AccessArray nice = new AccessArray();\n\n        System.out.println(nice.mobileOperator[0]);\n        System.out.println(nice.number[1]);\n        System.out.println(networkOperator[1]);\n    }\n}"
                        },
                        {
                            "description": "Output",
                            "code": "Nokia\n2\nVisio"
                        },
                        {
                            "description": "Accessing Elements of an Array with Comments",
                            "code": "// Define a class named AccessArray\npublic class AccessArray {\n\n    // Declare an array of strings named mobileOperator and assign some mobile brands\n    String[] mobileOperator = {\"Nokia\", \"Samsung\", \"iOS\"};\n\n    // Declare an array of integers named number with some values\n    int[] number = {1, 2, 3, 0, 4, 5};\n\n    // Main method – the starting point of the program\n    public static void main(String[] args) {\n\n        // Declare and initialize another string array inside the main method\n        String[] networkOperator = {\"LMT\", \"Visio\", \"iOS\"};\n\n        // Create an object of AccessArray class\n        AccessArray nice = new AccessArray();\n\n        // Print the first element of the mobileOperator array (Nokia)\n        System.out.println(nice.mobileOperator[0]);\n\n        // Print the second element of the number array (2)\n        System.out.println(nice.number[1]);\n\n        // Print the second element of the networkOperator array (Visio)\n        System.out.println(networkOperator[1]);\n    }\n}"
                          },
                          {
                            "description": "Modifying Elements in an Array",
                            "code": "public class ChangeElementArray {\n\n    // Instance variable (array)  \n    String[] cars = {\"Toyota\"}; \n\n    public static void main(String[] args) {\n\n        // Local array  \n        String[] fruit = {\"Apple\"};  \n\n        // Modifying local array  \n        fruit[0] = \"Mango\";  \n\n        // Creating an object to access instance variable  \n        ChangeElementArray changeArray = new ChangeElementArray();  \n\n        // Modifying instance array  \n        changeArray.cars[0] = \"Tesla\";  \n\n        // Printing modified values  \n        System.out.println(changeArray.cars[0]); // Output: Tesla  \n        System.out.println(fruit[0]); // Output: Mango  \n    }\n}"
                          }
                          
                          
                    ]
                },
                {
                    "id": "subtopic5-2",
                    "title": "2D Array",
                    "description": "Arrays within arrays, useful for matrices.",
                    "content": [
                        {
                            "description": "Declaring and Initializing a 2D Array",
                            "code": "public class TwoDArray{\n\n    public static void main(String[] args) {\n        \n        int [] [] arr ={\n\n            // Declare and initialize 2D Array\n            {1,2,3},\n            {4,5,6},\n            {7,8,9}\n\n        };\n\n        // Accessing Array Items Manually\n        System.err.println(arr[0][0]); // 1\n        System.err.println(arr[0][1]); // 2\n        System.err.println(arr[0][2]); // 3\n        System.err.println(arr[1][0]); // 4\n        System.err.println(arr[1][1]); // 5\n        System.err.println(arr[1][2]); // 6\n        System.err.println(arr[2][0]); // 7\n        System.err.println(arr[2][1]); // 8\n        System.err.println(arr[2][2]); // 9\n    }\n}",
                            "table": {
                		"headers": ["Index", "Column 0","Column 1","Column 2"],
                		"rows": [
                    		["Row 0", "arr [0][0]", "[0][1]", "[0][2]"],
                            ["Row 1", "arr [1][0]", "[1][1]", "[1][2]"],
                            ["Row 2", "arr [2][0]", "[2][1]", "[2][2]"]
                ]
            }
                        },
                        {
                            "description": "💡Example: Printing a 2D Array Using Loops: Instead of manually accessing each element, we can use nested loops to iterate through the array.",
                            "code": "public class Main {\n    public static void main(String[] args) {\n        // Declare and initialize a 3x3 2D array\n        int[][] arr = {\n            {1, 2, 3},\n            {4, 5, 6},\n            {7, 8, 9}\n        };\n\n        // Loop through rows\n        for (int i = 0; i < arr.length; i++) {\n            // Loop through columns\n            for (int j = 0; j < arr[i].length; j++) {\n                // Print each element\n                System.out.print(arr[i][j] + \" \");\n            }\n            // Move to the next line after each row\n            System.out.println();\n        }\n    }\n}"
                          }
                    ]
                },
                {
                    "id": "subtopic5-3",
                    "title": "3D Array",
                    "description": "3D arrays are commonly used when dealing with multi-dimensional data where each element has layers, rows, and columns. e.g: Game Development, Image Processing, Machine Learning & AI, Scientific Simulations, Database Management ",
                    "content": [
                        {
                            "description": "Declaring and Initializing a 3D Array = [Layer][Row] [Col]",
                            "code": "int[][][] arr = { \n { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} }, \n { {10, 11, 12}, {13, 14, 15}, {16, 17, 18} }, \n { {19, 20, 21}, {22, 23, 24}, {25, 26, 27} }\n};",
                            "table": {
                		"headers": ["Layer","Index", "Column 0","Column 1","Column 2"],
                		"rows": [
                    		["Layer 0","Row 0", "arr [0][0][0] = 1 ", "[0][0][1] = 2 ", "[0][0][2] = 3 "],
                            ["Layer 0","Row 1", "arr [0][1][0] = 4",  "[0][1][1] = 5", "[0][1][2]  = 6"],
                            ["Layer 0","Row 2", "arr [0][2][0] = 7", "[0][2][1] = 8", "[0][2][2] = 9"],

                            ["Layer 1","Row 0", "arr [1][0][0] = 10 ", "[1][0][1] = 11 ", "[1][0][2] = 12 "],
                            ["Layer 1","Row 1", "arr [1][1][0] = 13",  "[1][1][1] = 14", "[1][1][2]  = 15"],
                            ["Layer 1","Row 2", "arr [1][2][0] = 16", "[1][2][1] = 17", "[1][2][2] = 18"],

                            ["Layer 2","Row 0", "arr [2][0][0] = 19 ", "[2][0][1] = 20 ", "[2][0][2] = 21 "],
                            ["Layer 2","Row 1", "arr [2][1][0] = 22",  "[2][1][1] = 23", "[2][1][2]  = 24"],
                            ["Layer 2","Row 2", "arr [2][2][0] = 25", "[2][2][1] = 26", "[2][2][2] = 27"]


                ]
            }
                        },
                        {
                            "description": "💡Print the 3D array without using any control statements",
                            "code": "public class Print3DArray {\n    public static void main(String[] args) {\n        // Defining a 3D array (3 layers, 3 rows, 3 columns)\n        int[][][] arr = {\n            { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} }, \n            { {10, 11, 12}, {13, 14, 15}, {16, 17, 18} }, \n            { {19, 20, 21}, {22, 23, 24}, {25, 26, 27} }\n        };\n\n        // Manually printing each layer, row, and column\n        System.out.println(\\\"Layer 0:\\\");\n        System.out.println(arr[0][0][0] + \\\" \\\" + arr[0][0][1] + \\\" \\\" + arr[0][0][2]);\n        System.out.println(arr[0][1][0] + \\\" \\\" + arr[0][1][1] + \\\" \\\" + arr[0][1][2]);\n        System.out.println(arr[0][2][0] + \\\" \\\" + arr[0][2][1] + \\\" \\\" + arr[0][2][2]);\n        System.out.println();\n\n        System.out.println(\\\"Layer 1:\\\");\n        System.out.println(arr[1][0][0] + \\\" \\\" + arr[1][0][1] + \\\" \\\" + arr[1][0][2]);\n        System.out.println(arr[1][1][0] + \\\" \\\" + arr[1][1][1] + \\\" \\\" + arr[1][1][2]);\n        System.out.println(arr[1][2][0] + \\\" \\\" + arr[1][2][1] + \\\" \\\" + arr[1][2][2]);\n        System.out.println();\n\n        System.out.println(\\\"Layer 2:\\\");\n        System.out.println(arr[2][0][0] + \\\" \\\" + arr[2][0][1] + \\\" \\\" + arr[2][0][2]);\n        System.out.println(arr[2][1][0] + \\\" \\\" + arr[2][1][1] + \\\" \\\" + arr[2][1][2]);\n        System.out.println(arr[2][2][0] + \\\" \\\" + arr[2][2][1] + \\\" \\\" + arr[2][2][2]);\n    }\n}"
  
                          },
                          {
                            "description": "Output",
                            "code": "Layer 0: \n 1 2 3 \n 4 5 6 \n 7 8 9 \nLayer 1: \n 10 11 12 \n 13 14 15 \n 16 17 18\nLayer 3: \n 19 20 21 \n 22 23 24 \n 25 26 27"
                          },
                        {
                            "description": "💡Example: Printing a 3D Array Using Loops: Instead of manually accessing each element, we can use nested loops to iterate through the array.",
                            "code": "public class Print3DArray {\n    public static void main(String[] args) {\n        // Defining a 3D array (3 layers, 3 rows, 3 columns)\n        int[][][] arr = {\n            { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} }, \n            { {10, 11, 12}, {13, 14, 15}, {16, 17, 18} }, \n            { {19, 20, 21}, {22, 23, 24}, {25, 26, 27} }\n        };\n\n        // Loop through layers\n        for (int i = 0; i < arr.length; i++) { \n            System.out.println(\"Layer \" + i + \":\");\n            \n            // Loop through rows\n            for (int j = 0; j < arr[i].length; j++) { \n                \n                // Loop through columns\n                for (int k = 0; k < arr[i][j].length; k++) { \n                    System.out.print(arr[i][j][k] + \" \");\n                }\n                System.out.println(); // Move to a new line after printing a row\n            }\n            System.out.println(); // Add a blank line between layers\n        }\n    }\n}"  
                          },
                          {
                            "description": "Output",
                            "code": "Layer 0: \n 1 2 3 \n 4 5 6 \n 7 8 9 \nLayer 1: \n 10 11 12 \n 13 14 15 \n 16 17 18\nLayer 3: \n 19 20 21 \n 22 23 24 \n 25 26 27"
                          }

                    ]
                }

            ]
        }
    ]
}
